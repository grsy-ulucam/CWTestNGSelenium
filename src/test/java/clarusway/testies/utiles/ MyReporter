import java.io.BufferedWriter;

import java.io.File;

import java.io.FileWriter;

import java.io.IOException;

import java.io.PrintWriter;

import java.text.DateFormat;

import java.text.NumberFormat;

import java.text.SimpleDateFormat;

import java.util.Calendar;

import java.util.Collections;

import java.util.Comparator;

import java.util.Date;

import java.util.Iterator;

import java.util.List;

import java.util.Scanner;

import java.util.Set;

import java.util.concurrent.TimeUnit;

import org.testng.IReporter;

import org.testng.ISuite;

import org.testng.ISuiteResult;

import org.testng.ITestContext;

import org.testng.ITestResult;

import org.testng.Reporter;

import org.testng.collections.Lists;

import org.testng.internal.Utils;

import org.testng.log4testng.Logger;

import org.testng.xml.XmlSuite;

/**

 * Reporter that generates a single-page HTML report of the test results.

 */

public class MyReporter implements IReporter {

    /* Convert long type milliseconds to format hh:mm:ss */

    public String convertTimeToString(long miliSeconds) {

        int hrs = (int) TimeUnit.MILLISECONDS.toHours(miliSeconds) % 24;

        int min = (int) TimeUnit.MILLISECONDS.toMinutes(miliSeconds) % 60;

        int sec = (int) TimeUnit.MILLISECONDS.toSeconds(miliSeconds) % 60;

        return String.format("%02d:%02d:%02d", hrs, min, sec);

    }

    private static final Logger LOG = Logger.getLogger(MyReporter.class);

    protected PrintWriter writer;

    protected final List<SuiteResult> suiteResults = Lists.newArrayList();

    // Reusable buffer

    private final StringBuilder buffer = new StringBuilder();

    private String dReportTitle = "TestNG Customized Report";

    private String dReportFileName = "emailable-report2.html";

    @Override

    public void generateReport(List<XmlSuite> xmlSuites, List<ISuite> suites, String outputDirectory) {

        try {

            writer = createWriter(outputDirectory);

        } catch (IOException e) {

            LOG.error("Unable to create output file", e);

            return;

        }

        for (ISuite suite : suites) {

            suiteResults.add(new SuiteResult(suite));

        }

        writeDocumentStart();

        writeHead();

        writeBody();

        writeDocumentEnd();

        writer.close();

    }

    protected PrintWriter createWriter(String outdir) throws IOException {

        new File(outdir).mkdirs();

        return new PrintWriter(new BufferedWriter(new FileWriter(new File(outdir, dReportFileName))));

    }

    protected void writeReportTitle(String title) {

        writer.println("<center><h1>" + title + " - " + new Date() + "</h1></center>");

    }

    protected void writeDocumentStart() {

        writer.println("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">");

        writer.println("<html xmlns=\"http://www.w3.org/1999/xhtml\">");

    }

    protected void writeHead() {

        writer.println("<head>");

        writer.println("<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"/>");

        writer.println("<title>TestNG Report</title>");

        writeStylesheet();

        writer.println("</head>");

    }

    protected void writeStylesheet() {

        writer.println("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\">");

        writer.print("<style type=\"text/css\">");

        writer.print("table {margin-bottom:10px;border-collapse:collapse;empty-cells:show}");

        writer.print("#summary {margin-top:30px}");

        writer.print("h1 {font-size:30px}");

        writer.print("body {width:100%;}");

        writer.print("th,td {padding: 8px}");

        writer.print("th {vertical-align:bottom}");

        writer.print("td {vertical-align:top}");

        writer.print("table a {font-weight:bold;color:#0D1EB6;}");

        writer.print(".easy-overview {margin-left: auto; margin-right: auto;} ");

        writer.print(".easy-test-overview tr:first-child {background-color:#D3D3D3}");

        writer.print(".stripe td {background-color: #E6EBF9}");

        writer.print(".num {text-align:right}");

        writer.print(".passedodd td {background-color: #3F3}");

        writer.print(".passedeven td {background-color: #0A0}");

        writer.print(".skippedodd td {background-color: #DDD}");

        writer.print(".skippedeven td {background-color: #CCC}");

        writer.print(".failedodd td,.attn {background-color: #F33}");

        writer.print(".failedeven td,.stripe .attn {background-color: #D00}");

        writer.print(".stacktrace {font-family:monospace}");

        writer.print(".totop {font-size:85%;text-align:center;border-bottom:2px solid #000}");

        writer.print(".invisible {display:none}");

        writer.println("</style>");

    }

    protected void writeBody() {

        writer.println("<body>");

        writeReportTitle(dReportTitle);

        writeSuiteSummary();

        writeScenarioSummary();

        writeScenarioDetails();

        writer.println("</body>");

    }

    protected void writeDocumentEnd() {

        writer.println("</html>");

    }

    protected void writeSuiteSummary() {

        NumberFormat integerFormat = NumberFormat.getIntegerInstance();

        SimpleDateFormat dateFormat = new SimpleDateFormat("hh:mm:ss a");

        int totalTestsCount = 0;

        int totalPassedTests = 0;

        int totalSkippedTests = 0;

        int totalFailedTests = 0;

        long totalDuration = 0;

        writer.println("<div class=\"easy-test-overview\">");

        writer.println("<table class=\"table-bordered easy-overview\">");

        writer.print("<tr>");

        writer.print("<th>Test</th>");

        writer.print("<th># No</th>");

        writer.print("<th># Passed</th>");

        writer.print("<th># Skipped</th>");

        writer.print("<th># Failed</th>");

        writer.print("<th>Included Groups</th>");

        writer.print("<th>Excluded Groups</th>");

        writer.print("<th># Browser</th>");

        writer.print("<th># Start Time</th>");

        writer.print("<th># End Time</th>");

        writer.print("<th># Total<br/>Time(hh:mm:ss)</th>");

        writer.println("</tr>");

        int testIndex = 0;

        for (SuiteResult suiteResult : suiteResults) {

            writer.print("<tr><th colspan=\"11\">");

            writer.print(Utils.escapeHtml(suiteResult.getSuiteName()));

            writer.println("</th></tr>");

            for (TestResult testResult : suiteResult.getTestResults()) {

                int testsCount = testResult.getTestCount();

                int passedTests = testResult.getPassedTestCount();

                int skippedTests = testResult.getSkippedTestCount();

                int failedTests = testResult.getFailedTestCount();

                Date startTime = testResult.getTestStartTime();

                Date endTime = testResult.getTestEndTime();

                long duration = testResult.getDuration();

                writer.print("<tr");

                if ((testIndex % 2) == 1) {

                    writer.print(" class=\"stripe\"");

                }

                writer.print(">");

                buffer.setLength(0);

                writeTableData(buffer.append("<a href=\"#t").append(testIndex)

                        .append("\">")

                        .append(Utils.escapeHtml(testResult.getTestName()))

                        .append("</a>").toString());

                writeTableData(integerFormat.format(testsCount), "num");

                writeTableData(integerFormat.format(passedTests), "num");

                writeTableData(integerFormat.format(skippedTests),

                        (skippedTests > 0 ? "num attn" : "num"));

                writeTableData(integerFormat.format(failedTests),

                        (failedTests > 0 ? "num attn" : "num"));

                writeTableData(testResult.getIncludedGroups());

                writeTableData(testResult.getExcludedGroups());

                writeTableData("chrome",  "num");

                writeTableData(dateFormat.format(startTime),  "num");

                writeTableData(dateFormat.format(endTime),  "num");

                writeTableData(convertTimeToString(duration), "num");

                writer.println("</tr>");

                totalTestsCount +=testsCount;

                totalPassedTests += passedTests;

                totalSkippedTests += skippedTests;

                totalFailedTests += failedTests;

                totalDuration += duration;

                testIndex++;

            }

        }